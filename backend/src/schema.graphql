type Query {
  data: DataResponse!
}

type Mutation {
  listCreate(input: ListCreateInput!): [List]!
  listUpdate(input: ListUpdateInput!): List!
  listDestroy(id: ID!): Boolean!

  taskCreate(input: TaskCreateInput!): TaskCreateResponse!
  taskUpdate(input: TaskUpdateInput!): Task!
  taskDestroy(id: ID!): Boolean!
  taskReorder(input: TaskReorderInput!): DataResponse!
}

type DataResponse {
  lists: [List]!
  tasks: [Task]!
}

interface LinkedListNode {
  next: ID
}

type List implements LinkedListNode {
  id: ID!
  next: ID
  name: String!
  root: ID
}
input ListCreateInput {
  name: String!
}
input ListUpdateInput {
  id: ID!
  name: String!
  root: ID
}

type Task implements LinkedListNode {
  id: ID!
  next: ID
  listID: ID!
  description: String!
  done: Boolean!
  date: String
}
input TaskCreateInput {
  listID: ID!
  description: String!
  date: String
}
type TaskCreateResponse {
  tasks: [Task]!
  taskCreateID: ID!
}
input TaskUpdateInput {
  id: ID!
  description: String!
  done: Boolean!
  date: String
}
input TaskReorderInput {
  fromID: ID!
  toID: ID!
}
